State 0:
          input ::= * processes
      (1) processes ::= *
          processes ::= * INCLUDE STRING processes
          processes ::= * INCLUDE_GUARD STRING processes
          processes ::= * process_or_template NAME CURLY_OPEN statements CURLY_CLOSE processes
          process_or_template ::= * PROCESS
          process_or_template ::= * TEMPLATE

                       INCLUDE shift  44
                 INCLUDE_GUARD shift  45
                       PROCESS shift  80
                      TEMPLATE shift  81
                     processes shift  43
           process_or_template shift  46
                         input accept
                     {default} reduce 1

State 1:
          statement ::= dotted_name ROUND_OPEN * statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
     (20) statement_args_maybe ::= *
          statement_args_maybe ::= * list_contents
          list_contents ::= * value
          list_contents ::= * value COMMA list_contents
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
          statement_args_maybe shift  49
                 list_contents shift  85
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  35
                     {default} reduce 20

State 2:
          statement ::= dotted_name ARROW dotted_name ROUND_OPEN * statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
     (20) statement_args_maybe ::= *
          statement_args_maybe ::= * list_contents
          list_contents ::= * value
          list_contents ::= * value COMMA list_contents
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
          statement_args_maybe shift  56
                 list_contents shift  85
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  35
                     {default} reduce 20

State 3:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list_contents ::= * value
          list_contents ::= * value COMMA list_contents
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= CURLY_OPEN * CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          list ::= CURLY_OPEN * list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                   CURLY_CLOSE shift  87
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                 list_contents shift  52
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  35

State 4:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map_contents ::= * value COLON value
          map_contents ::= * value COLON value COMMA map_contents
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= BRACKET_OPEN * BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          map ::= BRACKET_OPEN * map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                 BRACKET_CLOSE shift  98
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                  map_contents shift  54
                           map shift  94
                         invoc shift  96
                         value shift  36

State 5:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list_contents ::= * value
          list_contents ::= * value COMMA list_contents
          list_contents ::= value COMMA * list_contents
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                 list_contents shift  86
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  35

State 6:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map_contents ::= * value COLON value
          map_contents ::= * value COLON value COMMA map_contents
          map_contents ::= value COLON value COMMA * map_contents
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                  map_contents shift  89
                           map shift  94
                         invoc shift  96
                         value shift  36

State 7:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list_contents ::= * value
          list_contents ::= * value COMMA list_contents
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          invoc ::= value ROUND_OPEN * list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                 list_contents shift  53
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  35

State 8:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map_contents ::= value COLON * value
          map_contents ::= value COLON * value COMMA map_contents
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  37

State 9:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= ROUND_OPEN * value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  38

State 10:
          statement ::= IF ROUND_OPEN * value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  39

State 11:
          statement ::= FOREACH ROUND_OPEN * value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH ROUND_OPEN * value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  40

State 12:
          elif ::= ELIF ROUND_OPEN * value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE
          elif ::= ELIF ROUND_OPEN * value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          list ::= * CURLY_OPEN CURLY_CLOSE
          list ::= * CURLY_OPEN list_contents CURLY_CLOSE
          map ::= * BRACKET_OPEN BRACKET_CLOSE
          map ::= * BRACKET_OPEN map_contents BRACKET_CLOSE
          invoc ::= * value ROUND_OPEN list_contents ROUND_CLOSE
          value ::= * STRING
          value ::= * AT_SIGN dotted_name
          value ::= * dotted_name
          value ::= * list
          value ::= * map
          value ::= * ROUND_OPEN value ROUND_CLOSE
          value ::= * invoc

                        STRING shift  90
                          NAME shift  51
                    CURLY_OPEN shift  3
                    ROUND_OPEN shift  9
                  BRACKET_OPEN shift  4
                       AT_SIGN shift  26
                   dotted_name shift  92
                          list shift  93
                           map shift  94
                         invoc shift  96
                         value shift  42

State 13:
          processes ::= process_or_template NAME CURLY_OPEN * statements CURLY_CLOSE processes
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statements ::= * statement
          statements ::= * statement statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  48
                   dotted_name shift  34

State 14:
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN * statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statements ::= * statement
          statements ::= * statement statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  60
                   dotted_name shift  34

State 15:
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          else_maybe ::= ELSE CURLY_OPEN * statements CURLY_CLOSE
          statements ::= * statement
          statements ::= * statement statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  73
                   dotted_name shift  34

State 16:
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN * statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statements ::= * statement
          statements ::= * statement statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  66
                   dotted_name shift  34

State 17:
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statements ::= * statement
     (16) statements ::= statement *
          statements ::= * statement statements
          statements ::= statement * statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  103
                   dotted_name shift  34
                     {default} reduce 16

State 18:
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN * statements CURLY_CLOSE name_maybe SEMICOLON
          statements ::= * statement
          statements ::= * statement statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  71
                   dotted_name shift  34

State 19:
          statement ::= * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= * IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= * FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN * statements CURLY_CLOSE
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN * statements CURLY_CLOSE elif
          statements ::= * statement
          statements ::= * statement statements
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                            IF shift  58
                       FOREACH shift  63
                     statement shift  17
                    statements shift  76
                   dotted_name shift  34

State 20:
      (1) processes ::= *
          processes ::= * INCLUDE STRING processes
          processes ::= INCLUDE STRING * processes
          processes ::= * INCLUDE_GUARD STRING processes
          processes ::= * process_or_template NAME CURLY_OPEN statements CURLY_CLOSE processes
          process_or_template ::= * PROCESS
          process_or_template ::= * TEMPLATE

                       INCLUDE shift  44
                 INCLUDE_GUARD shift  45
                       PROCESS shift  80
                      TEMPLATE shift  81
                     processes shift  77
           process_or_template shift  46
                     {default} reduce 1

State 21:
      (1) processes ::= *
          processes ::= * INCLUDE STRING processes
          processes ::= * INCLUDE_GUARD STRING processes
          processes ::= INCLUDE_GUARD STRING * processes
          processes ::= * process_or_template NAME CURLY_OPEN statements CURLY_CLOSE processes
          process_or_template ::= * PROCESS
          process_or_template ::= * TEMPLATE

                       INCLUDE shift  44
                 INCLUDE_GUARD shift  45
                       PROCESS shift  80
                      TEMPLATE shift  81
                     processes shift  78
           process_or_template shift  46
                     {default} reduce 1

State 22:
      (1) processes ::= *
          processes ::= * INCLUDE STRING processes
          processes ::= * INCLUDE_GUARD STRING processes
          processes ::= * process_or_template NAME CURLY_OPEN statements CURLY_CLOSE processes
          processes ::= process_or_template NAME CURLY_OPEN statements CURLY_CLOSE * processes
          process_or_template ::= * PROCESS
          process_or_template ::= * TEMPLATE

                       INCLUDE shift  44
                 INCLUDE_GUARD shift  45
                       PROCESS shift  80
                      TEMPLATE shift  81
                     processes shift  79
           process_or_template shift  46
                     {default} reduce 1

State 23:
          statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE * elif_maybe else_maybe name_maybe SEMICOLON
     (10) elif_maybe ::= *
          elif_maybe ::= * elif
          elif ::= * ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE
          elif ::= * ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif

                          ELIF shift  74
                    elif_maybe shift  29
                          elif shift  106
                     {default} reduce 10

State 24:
          statement ::= dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE * name_maybe SEMICOLON
     (38) name_maybe ::= *
          name_maybe ::= * NAME

                          NAME shift  83
                    name_maybe shift  50
                     {default} reduce 38

State 25:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          dotted_name ::= NAME DOT * dotted_name

                          NAME shift  51
                   dotted_name shift  84

State 26:
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name
          value ::= AT_SIGN * dotted_name

                          NAME shift  51
                   dotted_name shift  91

State 27:
          statement ::= dotted_name ARROW * dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          dotted_name ::= * NAME
          dotted_name ::= * NAME DOT dotted_name

                          NAME shift  51
                   dotted_name shift  55

State 28:
          statement ::= dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE * name_maybe SEMICOLON
     (38) name_maybe ::= *
          name_maybe ::= * NAME

                          NAME shift  83
                    name_maybe shift  57
                     {default} reduce 38

State 29:
          statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe * else_maybe name_maybe SEMICOLON
     (14) else_maybe ::= *
          else_maybe ::= * ELSE CURLY_OPEN statements CURLY_CLOSE

                          ELSE shift  62
                    else_maybe shift  30
                     {default} reduce 14

State 30:
          statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe * name_maybe SEMICOLON
     (38) name_maybe ::= *
          name_maybe ::= * NAME

                          NAME shift  83
                    name_maybe shift  61
                     {default} reduce 38

State 31:
          statement ::= FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE * name_maybe SEMICOLON
     (38) name_maybe ::= *
          name_maybe ::= * NAME

                          NAME shift  83
                    name_maybe shift  67
                     {default} reduce 38

State 32:
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE * name_maybe SEMICOLON
     (38) name_maybe ::= *
          name_maybe ::= * NAME

                          NAME shift  83
                    name_maybe shift  72
                     {default} reduce 38

State 33:
          elif ::= * ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE
     (12) elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE *
          elif ::= * ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE * elif

                          ELIF shift  74
                          elif shift  107
                     {default} reduce 12

State 34:
          statement ::= dotted_name * ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON
          statement ::= dotted_name * ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON

                    ROUND_OPEN shift  1
                         ARROW shift  27

State 35:
     (22) list_contents ::= value *
          list_contents ::= value * COMMA list_contents
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE

                    ROUND_OPEN shift  7
                         COMMA shift  5
                     {default} reduce 22

State 36:
          map_contents ::= value * COLON value
          map_contents ::= value * COLON value COMMA map_contents
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE

                    ROUND_OPEN shift  7
                         COLON shift  8

State 37:
     (26) map_contents ::= value COLON value *
          map_contents ::= value COLON value * COMMA map_contents
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE

                    ROUND_OPEN shift  7
                         COMMA shift  6
                     {default} reduce 26

State 38:
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE
          value ::= ROUND_OPEN value * ROUND_CLOSE

                    ROUND_OPEN shift  7
                   ROUND_CLOSE shift  97

State 39:
          statement ::= IF ROUND_OPEN value * ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE

                    ROUND_OPEN shift  7
                   ROUND_CLOSE shift  59

State 40:
          statement ::= FOREACH ROUND_OPEN value * AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH ROUND_OPEN value * AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE

                    ROUND_OPEN shift  7
                            AS shift  64

State 41:
          statement ::= FOREACH ROUND_OPEN value AS NAME * ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH ROUND_OPEN value AS NAME * COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                   ROUND_CLOSE shift  65
                         COLON shift  68

State 42:
          elif ::= ELIF ROUND_OPEN value * ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE
          elif ::= ELIF ROUND_OPEN value * ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif
          invoc ::= value * ROUND_OPEN list_contents ROUND_CLOSE

                    ROUND_OPEN shift  7
                   ROUND_CLOSE shift  75

State 43:
      (0) input ::= processes *

                             $ reduce 0

State 44:
          processes ::= INCLUDE * STRING processes

                        STRING shift  20

State 45:
          processes ::= INCLUDE_GUARD * STRING processes

                        STRING shift  21

State 46:
          processes ::= process_or_template * NAME CURLY_OPEN statements CURLY_CLOSE processes

                          NAME shift  47

State 47:
          processes ::= process_or_template NAME * CURLY_OPEN statements CURLY_CLOSE processes

                    CURLY_OPEN shift  13

State 48:
          processes ::= process_or_template NAME CURLY_OPEN statements * CURLY_CLOSE processes

                   CURLY_CLOSE shift  22

State 49:
          statement ::= dotted_name ROUND_OPEN statement_args_maybe * ROUND_CLOSE name_maybe SEMICOLON

                   ROUND_CLOSE shift  24

State 50:
          statement ::= dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe * SEMICOLON

                     SEMICOLON shift  82

State 51:
     (18) dotted_name ::= NAME *
          dotted_name ::= NAME * DOT dotted_name

                           DOT shift  25
                     {default} reduce 18

State 52:
          list ::= CURLY_OPEN list_contents * CURLY_CLOSE

                   CURLY_CLOSE shift  88

State 53:
          invoc ::= value ROUND_OPEN list_contents * ROUND_CLOSE

                   ROUND_CLOSE shift  95

State 54:
          map ::= BRACKET_OPEN map_contents * BRACKET_CLOSE

                 BRACKET_CLOSE shift  99

State 55:
          statement ::= dotted_name ARROW dotted_name * ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON

                    ROUND_OPEN shift  2

State 56:
          statement ::= dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe * ROUND_CLOSE name_maybe SEMICOLON

                   ROUND_CLOSE shift  28

State 57:
          statement ::= dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe * SEMICOLON

                     SEMICOLON shift  100

State 58:
          statement ::= IF * ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON

                    ROUND_OPEN shift  10

State 59:
          statement ::= IF ROUND_OPEN value ROUND_CLOSE * CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON

                    CURLY_OPEN shift  14

State 60:
          statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements * CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON

                   CURLY_CLOSE shift  23

State 61:
          statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe * SEMICOLON

                     SEMICOLON shift  101

State 62:
          else_maybe ::= ELSE * CURLY_OPEN statements CURLY_CLOSE

                    CURLY_OPEN shift  15

State 63:
          statement ::= FOREACH * ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH * ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                    ROUND_OPEN shift  11

State 64:
          statement ::= FOREACH ROUND_OPEN value AS * NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON
          statement ::= FOREACH ROUND_OPEN value AS * NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                          NAME shift  41

State 65:
          statement ::= FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE * CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                    CURLY_OPEN shift  16

State 66:
          statement ::= FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements * CURLY_CLOSE name_maybe SEMICOLON

                   CURLY_CLOSE shift  31

State 67:
          statement ::= FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe * SEMICOLON

                     SEMICOLON shift  102

State 68:
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON * NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                          NAME shift  69

State 69:
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME * ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                   ROUND_CLOSE shift  70

State 70:
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE * CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON

                    CURLY_OPEN shift  18

State 71:
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements * CURLY_CLOSE name_maybe SEMICOLON

                   CURLY_CLOSE shift  32

State 72:
          statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe * SEMICOLON

                     SEMICOLON shift  104

State 73:
          else_maybe ::= ELSE CURLY_OPEN statements * CURLY_CLOSE

                   CURLY_CLOSE shift  105

State 74:
          elif ::= ELIF * ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE
          elif ::= ELIF * ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif

                    ROUND_OPEN shift  12

State 75:
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE * CURLY_OPEN statements CURLY_CLOSE
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE * CURLY_OPEN statements CURLY_CLOSE elif

                    CURLY_OPEN shift  19

State 76:
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements * CURLY_CLOSE
          elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements * CURLY_CLOSE elif

                   CURLY_CLOSE shift  33

State 77:
      (2) processes ::= INCLUDE STRING processes *

                     {default} reduce 2

State 78:
      (3) processes ::= INCLUDE_GUARD STRING processes *

                     {default} reduce 3

State 79:
      (4) processes ::= process_or_template NAME CURLY_OPEN statements CURLY_CLOSE processes *

                     {default} reduce 4

State 80:
     (40) process_or_template ::= PROCESS *

                     {default} reduce 40

State 81:
     (41) process_or_template ::= TEMPLATE *

                     {default} reduce 41

State 82:
      (5) statement ::= dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON *

                     {default} reduce 5

State 83:
     (39) name_maybe ::= NAME *

                     {default} reduce 39

State 84:
     (19) dotted_name ::= NAME DOT dotted_name *

                     {default} reduce 19

State 85:
     (21) statement_args_maybe ::= list_contents *

                     {default} reduce 21

State 86:
     (23) list_contents ::= value COMMA list_contents *

                     {default} reduce 23

State 87:
     (24) list ::= CURLY_OPEN CURLY_CLOSE *

                     {default} reduce 24

State 88:
     (25) list ::= CURLY_OPEN list_contents CURLY_CLOSE *

                     {default} reduce 25

State 89:
     (27) map_contents ::= value COLON value COMMA map_contents *

                     {default} reduce 27

State 90:
     (31) value ::= STRING *

                     {default} reduce 31

State 91:
     (32) value ::= AT_SIGN dotted_name *

                     {default} reduce 32

State 92:
     (33) value ::= dotted_name *

                     {default} reduce 33

State 93:
     (34) value ::= list *

                     {default} reduce 34

State 94:
     (35) value ::= map *

                     {default} reduce 35

State 95:
     (30) invoc ::= value ROUND_OPEN list_contents ROUND_CLOSE *

                     {default} reduce 30

State 96:
     (37) value ::= invoc *

                     {default} reduce 37

State 97:
     (36) value ::= ROUND_OPEN value ROUND_CLOSE *

                     {default} reduce 36

State 98:
     (28) map ::= BRACKET_OPEN BRACKET_CLOSE *

                     {default} reduce 28

State 99:
     (29) map ::= BRACKET_OPEN map_contents BRACKET_CLOSE *

                     {default} reduce 29

State 100:
      (6) statement ::= dotted_name ARROW dotted_name ROUND_OPEN statement_args_maybe ROUND_CLOSE name_maybe SEMICOLON *

                     {default} reduce 6

State 101:
      (7) statement ::= IF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif_maybe else_maybe name_maybe SEMICOLON *

                     {default} reduce 7

State 102:
      (8) statement ::= FOREACH ROUND_OPEN value AS NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON *

                     {default} reduce 8

State 103:
     (17) statements ::= statement statements *

                     {default} reduce 17

State 104:
      (9) statement ::= FOREACH ROUND_OPEN value AS NAME COLON NAME ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE name_maybe SEMICOLON *

                     {default} reduce 9

State 105:
     (15) else_maybe ::= ELSE CURLY_OPEN statements CURLY_CLOSE *

                     {default} reduce 15

State 106:
     (11) elif_maybe ::= elif *

                     {default} reduce 11

State 107:
     (13) elif ::= ELIF ROUND_OPEN value ROUND_CLOSE CURLY_OPEN statements CURLY_CLOSE elif *

                     {default} reduce 13

----------------------------------------------------
Symbols:
    0: $:
    1: INCLUDE
    2: STRING
    3: INCLUDE_GUARD
    4: NAME
    5: CURLY_OPEN
    6: CURLY_CLOSE
    7: ROUND_OPEN
    8: ROUND_CLOSE
    9: SEMICOLON
   10: ARROW
   11: IF
   12: FOREACH
   13: AS
   14: COLON
   15: ELIF
   16: ELSE
   17: DOT
   18: COMMA
   19: BRACKET_OPEN
   20: BRACKET_CLOSE
   21: AT_SIGN
   22: PROCESS
   23: TEMPLATE
   24: error:
   25: processes: <lambda> INCLUDE INCLUDE_GUARD PROCESS TEMPLATE
   26: statement: NAME IF FOREACH
   27: elif_maybe: <lambda> ELIF
   28: elif: ELIF
   29: else_maybe: <lambda> ELSE
   30: statements: NAME IF FOREACH
   31: dotted_name: NAME
   32: statement_args_maybe: <lambda> STRING NAME CURLY_OPEN ROUND_OPEN BRACKET_OPEN AT_SIGN
   33: list_contents: STRING NAME CURLY_OPEN ROUND_OPEN BRACKET_OPEN AT_SIGN
   34: list: CURLY_OPEN
   35: map_contents: STRING NAME CURLY_OPEN ROUND_OPEN BRACKET_OPEN AT_SIGN
   36: map: BRACKET_OPEN
   37: invoc: STRING NAME CURLY_OPEN ROUND_OPEN BRACKET_OPEN AT_SIGN
   38: value: STRING NAME CURLY_OPEN ROUND_OPEN BRACKET_OPEN AT_SIGN
   39: name_maybe: <lambda> NAME
   40: process_or_template: PROCESS TEMPLATE
   41: input: INCLUDE INCLUDE_GUARD PROCESS TEMPLATE
